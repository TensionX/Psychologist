import { createReducer } from "@reduxjs/toolkit";

import {
  signUpRequest,
  signUpSuccess,
  signUpError,
  signInRequest,
  signInSuccess,
  signInError,
  resetError,
  refreshSessionRequest,
  refreshSessionSuccess,
  refreshSessionError,
  getClientsRequest,
  getClientsSuccess,
  getClientsError,
  removeClientRequest,
  removeClientSuccess,
  removeClientError,
  addClientRequest,
  addClientSuccess,
  addClientError,
  addTestRequest,
  addTestSuccess,
  addTestError,
  editTestRequest,
  editTestSuccess,
  editTestError,
  removeTestRequest,
  removeTestSuccess,
  removeTestError,
  getTestsRequest,
  getTestsSuccess,
  getTestsError,
  assignTestRequest,
  assignTestSuccess,
  assignTestError,
  getActiveTestRequest,
  getActiveTestSuccess,
  getActiveTestError,
  answerActiveTestRequest,
  answerActiveTestSuccess,
  answerActiveTestError,
  clientTestsRequest,
  clientTestsSuccess,
  clientTestsError,
  clientTestCommentRequest,
  clientTestCommentSuccess,
  clientTestCommentError,
  logoutRequest,
} from "./user.actions";

export const userReducer = createReducer(null, {
  [signInSuccess]: (_, { payload }) => payload,
  [refreshSessionError]: (_, __) => null,
  [logoutRequest]: (_, __) => null,
});

export const clientsReducer = createReducer(null, {
  [getClientsSuccess]: (_, { payload }) => payload,
  [logoutRequest]: (_, __) => null,
});

export const testsReducer = createReducer(null, {
  [getTestsSuccess]: (_, { payload }) => payload,
  [logoutRequest]: (_, __) => null,
});

export const clientTestsReducer = createReducer(null, {
  [clientTestsSuccess]: (_, { payload }) => payload,
  [logoutRequest]: (_, __) => null,
});

export const activeTestReducer = createReducer(null, {
  [getActiveTestSuccess]: (_, { payload }) => payload,
  [logoutRequest]: (_, __) => null,
});

export const errorMsg = createReducer(null, {
  [resetError]: (_, __) => null,
  [signUpError]: (_, { payload }) => payload,
  [signInError]: (_, { payload }) => payload,
  [getClientsError]: (_, { payload }) => payload,
  [addClientError]: (_, { payload }) => payload,
  [removeClientError]: (_, { payload }) => payload,
  [addTestError]: (_, { payload }) => payload,
  [editTestError]: (_, { payload }) => payload,
  [removeTestError]: (_, { payload }) => payload,
  [getTestsError]: (_, { payload }) => payload,
  [assignTestError]: (_, { payload }) => payload,
  [getActiveTestError]: (_, { payload }) => payload,
  [answerActiveTestError]: (_, { payload }) => payload,
  [clientTestsError]: (_, { payload }) => payload,
  [clientTestCommentError]: (_, { payload }) => payload,
});

export const loading = createReducer(false, {
  [addTestRequest]: () => true,
  [addTestSuccess]: () => false,
  [addTestError]: () => false,
  [clientTestsRequest]: () => true,
  [clientTestsSuccess]: () => false,
  [clientTestsError]: () => false,
  [clientTestCommentRequest]: () => true,
  [clientTestCommentSuccess]: () => false,
  [clientTestCommentError]: () => false,
  [answerActiveTestRequest]: () => true,
  [answerActiveTestSuccess]: () => false,
  [answerActiveTestError]: () => false,
  [getActiveTestRequest]: () => true,
  [getActiveTestSuccess]: () => false,
  [getActiveTestError]: () => false,
  [assignTestRequest]: () => true,
  [assignTestSuccess]: () => false,
  [assignTestError]: () => false,
  [editTestRequest]: () => true,
  [editTestSuccess]: () => false,
  [editTestError]: () => false,
  [removeTestRequest]: () => true,
  [removeTestSuccess]: () => false,
  [removeTestError]: () => false,
  [getTestsRequest]: () => true,
  [getTestsSuccess]: () => false,
  [getTestsError]: () => false,
  [getClientsRequest]: () => true,
  [getClientsSuccess]: () => false,
  [getClientsError]: () => false,
  [removeClientRequest]: () => true,
  [removeClientSuccess]: () => false,
  [removeClientError]: () => false,
  [addClientRequest]: () => true,
  [addClientSuccess]: () => false,
  [addClientError]: () => false,
  [signUpRequest]: () => true,
  [signUpSuccess]: () => false,
  [signUpError]: () => false,
  [signInRequest]: () => true,
  [signInSuccess]: () => false,
  [signInError]: () => false,
});
